[
    {
      "topic": "1. Algoritmy",
      "question": "Co znamená vlastnost 'konečnost' algoritmu?",
      "options": [
        "Algoritmus má více výstupů",
        "Algoritmus musí skončit v definovaném čase",
        "Algoritmus je napsán v přirozeném jazyce",
        "Algoritmus musí být efektivní"
      ],
      "answer": "Algoritmus musí skončit v definovaném čase"
    },
    {
      "topic": "1. Algoritmy",
      "question": "Který způsob zápisu algoritmu je neformální a čitelný pro člověka?",
      "options": [
        "Programovací jazyk",
        "Pseudokód",
        "Vývojový diagram",
        "Strojový kód"
      ],
      "answer": "Pseudokód"
    },
    {
      "topic": "1. Algoritmy",
      "question": "Co znamená hromadnost algoritmu?",
      "options": [
        "Algoritmus řeší pouze jeden konkrétní problém",
        "Algoritmus má více vstupů než výstupů",
        "Algoritmus řeší škálu podobných problémů",
        "Algoritmus je napsán v programovacím jazyce"
      ],
      "answer": "Algoritmus řeší škálu podobných problémů"
    },
    {
      "topic": "1. Algoritmy",
      "question": "Jaký je příklad pseudokódu?",
      "options": [
        "int main() { return 0; }",
        "Najdi maximum v poli čísel",
        "define factorial(n): f := 1",
        "Obdélník s textem 'vstup'"
      ],
      "answer": "define factorial(n): f := 1"
    },
    {
      "topic": "1. Algoritmy",
      "question": "Co je charakteristické pro efektivitu algoritmu?",
      "options": [
        "Má pouze jeden vstup",
        "Je co možná nejrychlejší a šetří zdroje",
        "Je specifický pro jeden problém",
        "Nepotřebuje výstup"
      ],
      "answer": "Je co možná nejrychlejší a šetří zdroje"
    },
    {
      "topic": "2. Programovací jazyky",
      "question": "Co charakterizuje vyšší programovací jazyky?",
      "options": [
        "Jsou blíže strojovému kódu",
        "Jsou nezávislé na hardware",
        "Jsou vždy interpretované",
        "Nepodporují objektové programování"
      ],
      "answer": "Jsou nezávislé na hardware"
    },
    {
      "topic": "2. Programovací jazyky",
      "question": "Který jazyk je příkladem kompilovaného jazyka?",
      "options": [
        "JavaScript",
        "PHP",
        "C++",
        "Python"
      ],
      "answer": "C++"
    },
    {
      "topic": "2. Programovací jazyky",
      "question": "Jaká je nevýhoda interpretovaných jazyků?",
      "options": [
        "Vyšší výkon díky překladu",
        "Publikují zdrojový kód",
        "Nutnost kompilace pro každou platformu",
        "Omezená podpora pro webový vývoj"
      ],
      "answer": "Publikují zdrojový kód"
    },
    {
      "topic": "2. Programovací jazyky",
      "question": "Co je výhodou kompilovaných jazyků?",
      "options": [
        "Lepší přenositelnost mezi systémy",
        "Vyšší výkon díky překladu do strojového kódu",
        "Automatická správa paměti",
        "Rychlejší vývoj aplikací"
      ],
      "answer": "Vyšší výkon díky překladu do strojového kódu"
    },
    {
      "topic": "2. Programovací jazyky",
      "question": "Který jazyk je příkladem interpretovaného jazyka?",
      "options": [
        "C#",
        "JavaScript",
        "Java",
        "C++"
      ],
      "answer": "JavaScript"
    },
    {
      "topic": "3. Java",
      "question": "Co je JVM v kontextu Javy?",
      "options": [
        "Nástroj pro vývoj Java aplikací",
        "Virtuální stroj pro běh Java bytecode",
        "Prostředí pro testování Java kódu",
        "Knihovna pro webový vývoj"
      ],
      "answer": "Virtuální stroj pro běh Java bytecode"
    },
    {
      "topic": "3. Java",
      "question": "Co obsahuje JRE?",
      "options": [
        "Nástroje pro vývoj a kompilátor",
        "JVM a základní knihovny",
        "Debugger a profiler",
        "Knihovny pro webové aplikace"
      ],
      "answer": "JVM a základní knihovny"
    },
    {
      "topic": "3. Java",
      "question": "Jakou roli hraje JIT v JVM?",
      "options": [
        "Kompiluje zdrojový kód do bytecode",
        "Překládá bytecode do nativního kódu za běhu",
        "Spravuje paměť aplikace",
        "Testuje Java aplikace"
      ],
      "answer": "Překládá bytecode do nativního kódu za běhu"
    },
    {
      "topic": "3. Java",
      "question": "Co zajišťuje platformovou nezávislost Javy?",
      "options": [
        "JDK",
        "JRE",
        "JVM",
        "JIT"
      ],
      "answer": "JVM"
    },
    {
      "topic": "3. Java",
      "question": "Jak se v Javě vypisuje do konzole?",
      "options": [
        "console.log('Hello')",
        "System.out.println('Hello')",
        "print('Hello')",
        "write('Hello')"
      ],
      "answer": "System.out.println('Hello')"
    },
    {
      "topic": "3. Java",
      "question": "Jak se v JavaScriptu deklaruje proměnná?",
      "options": [
        "int age = 30;",
        "let age = 30;",
        "final age = 30;",
        "static age = 30;"
      ],
      "answer": "let age = 30;"
    },
    {
      "topic": "3. Java",
      "question": "Co je charakteristické pro Java jako programovací jazyk?",
      "options": [
        "Je primárně určen pro webový vývoj",
        "Kompiluje se do bytecode a běží na JVM",
        "Je čistě interpretovaný",
        "Nepodporuje objektové programování"
      ],
      "answer": "Kompiluje se do bytecode a běží na JVM"
    },
    {
      "topic": "3. Java",
      "question": "Co je přetypování v Javě?",
      "options": [
        "Automatický převod proměnných",
        "Explicitní převod mezi typy, např. (int) 3.14",
        "Převod textu na číslo",
        "Změna názvu proměnné"
      ],
      "answer": "Explicitní převod mezi typy, např. (int) 3.14"
    },
    {
      "topic": "4. Paměť",
      "question": "Co je nevýhodou stack paměti?",
      "options": [
        "Pomalý přístup",
        "Omezená velikost",
        "Potřeba garbage collectoru",
        "Fragmentace paměti"
      ],
      "answer": "Omezená velikost"
    },
    {
      "topic": "4. Paměť",
      "question": "Kde se ukládají globální proměnné v paměti?",
      "options": [
        "Stack",
        "Heap",
        "Registr",
        "Cache"
      ],
      "answer": "Heap"
    },
    {
      "topic": "4. Paměť",
      "question": "Co je nevýhodou stack paměti?",
      "options": [
        "Pomalý přístup",
        "Omezená velikost",
        "Potřeba garbage collectoru",
        "Fragmentace paměti"
      ],
      "answer": "Omezená velikost"
    },
    {
      "topic": "4. Paměť",
      "question": "Kde se ukládají lokální proměnné v programu?",
      "options": [
        "Heap",
        "Stack",
        "Cache",
        "Registr"
      ],
      "answer": "Stack"
    },
    {
      "topic": "4. Paměť",
      "question": "Co zajišťuje garbage collector v paměti typu heap?",
      "options": [
        "Automatické uvolňování nepoužívané paměti",
        "Kontrolu velikosti stacku",
        "Překlad zdrojového kódu",
        "Optimalizaci přístupu do cache"
      ],
      "answer": "Automatické uvolňování nepoužívané paměti"
    },
    {
      "topic": "4. Paměť",
      "question": "Proč je heap paměť pomalejší než stack paměť?",
      "options": [
        "Kvůli omezené velikosti",
        "Kvůli dynamické alokaci paměti",
        "Kvůli absenci garbage collectoru",
        "Kvůli přímému přístupu k registrům"
      ],
      "answer": "Kvůli dynamické alokaci paměti"
    },
    {
      "topic": "5. Operátory",
      "question": "Který operátor vrací zbytek po dělení dvou čísel?",
      "options": [
        "+",
        "-",
        "%",
        "/"
      ],
      "answer": "%"
    },
    {
      "topic": "5. Operátory",
      "question": "Co vrací relační operátor '<=' při porovnání dvou hodnot?",
      "options": [
        "Celé číslo",
        "Boolean hodnotu",
        "Řetězec",
        "Desetinné číslo"
      ],
      "answer": "Boolean hodnotu"
    },
    {
      "topic": "5. Operátory",
      "question": "Který logický operátor vrací pravdu, pokud je alespoň jedna podmínka pravdivá?",
      "options": [
        "&&",
        "||",
        "!",
        "&"
      ],
      "answer": "||"
    },
    {
      "topic": "5. Operátory",
      "question": "Co dělá přiřazovací operátor '+=' v operaci 'a += b'?",
      "options": [
        "Přičte b k a a výsledek přiřadí do a",
        "Odečte b od a a výsledek přiřadí do a",
        "Vynásobí a a b a výsledek přiřadí do a",
        "Vydělí a hodnotou b a výsledek přiřadí do a"
      ],
      "answer": "Přičte b k a a výsledek přiřadí do a"
    },
    {
      "topic": "5. Operátory",
      "question": "Co vrací ternární operátor v kódu 'let result = (score >= 60) ? \"Pass\" : \"Fail\";'?",
      "options": [
        "Vrací číslo score",
        "Vrací řetězec \"Pass\" nebo \"Fail\" podle podmínky",
        "Vrací boolean hodnotu",
        "Vrací součet score a 60"
      ],
      "answer": "Vrací řetězec \"Pass\" nebo \"Fail\" podle podmínky"
    },
    {
      "topic": "6. Podmíněné větvení",
      "question": "Co je účelem podmíněného větvení?",
      "options": [
        "Opakování bloku kódu",
        "Vykonání různých částí kódu podle podmínky",
        "Uložení více hodnot do proměnné",
        "Třídění dat"
      ],
      "answer": "Vykonání různých částí kódu podle podmínky"
    },
    {
      "topic": "6. Podmíněné větvení",
      "question": "Který příkaz je vhodný pro výběr z více hodnot na základě jednoho výrazu?",
      "options": [
        "if",
        "switch",
        "for",
        "while"
      ],
      "answer": "switch"
    },
    {
      "topic": "6. Podmíněné větvení",
      "question": "Co je výhodou nového zápisu switch oproti starému?",
      "options": [
        "Nepotřebuje klíčové slovo break",
        "Je pomalejší",
        "Nepodporuje default",
        "Vyžaduje více paměti"
      ],
      "answer": "Nepotřebuje klíčové slovo break"
    },
    {
      "topic": "6. Podmíněné větvení",
      "question": "Co dělá ternární operátor v kódu 'String message = liche ? \"Číslo je liché\" : \"Číslo je sudé\";'?",
      "options": [
        "Vrací číslo",
        "Vrací řetězec podle boolean hodnoty liche",
        "Spustí cyklus",
        "Porovná dvě čísla"
      ],
      "answer": "Vrací řetězec podle boolean hodnoty liche"
    },
    {
      "topic": "6. Podmíněné větvení",
      "question": "Který příkaz je součástí podmíněného větvení?",
      "options": [
        "for",
        "else",
        "break",
        "continue"
      ],
      "answer": "else"
    },
    {
      "topic": "7. Cykly",
      "question": "Který cyklus je nejvhodnější, když je počet opakování znám?",
      "options": [
        "while",
        "do-while",
        "for",
        "switch"
      ],
      "answer": "for"
    },
    {
      "topic": "7. Cykly",
      "question": "Co zaručuje cyklus do-while?",
      "options": [
        "Alespoň jedno provedení bloku kódu",
        "Žádné provedení bloku kódu",
        "Přeskočení první iterace",
        "Okamžité ukončení cyklu"
      ],
      "answer": "Alespoň jedno provedení bloku kódu"
    },
    {
      "topic": "7. Cykly",
      "question": "Co dělá příkaz 'continue' v cyklu?",
      "options": [
        "Okamžitě ukončí cyklus",
        "Přeskočí aktuální iteraci a pokračuje další",
        "Vypíše hodnotu",
        "Spustí nový cyklus"
      ],
      "answer": "Přeskočí aktuální iteraci a pokračuje další"
    },
    {
      "topic": "7. Cykly",
      "question": "Který cyklus kontroluje podmínku před provedením bloku kódu?",
      "options": [
        "for",
        "do-while",
        "while",
        "foreach"
      ],
      "answer": "while"
    },
    {
      "topic": "7. Cykly",
      "question": "K čemu slouží příkaz 'break' v cyklu?",
      "options": [
        "Přeskočí aktuální iteraci",
        "Okamžitě ukončí cyklus",
        "Znovu spustí cyklus",
        "Vytvoří novou podmínku"
      ],
      "answer": "Okamžitě ukončí cyklus"
    },
    {
      "topic": "8. Pole",
      "question": "Co je účelem pole v programování?",
      "options": [
        "Uchovávání jedné hodnoty",
        "Uchovávání více hodnot v jedné proměnné",
        "Opakování bloku kódu",
        "Porovnávání hodnot"
      ],
      "answer": "Uchovávání více hodnot v jedné proměnné"
    },
    {
      "topic": "8. Pole",
      "question": "Jaký je první index v poli?",
      "options": [
        "1",
        "0",
        "-1",
        "2"
      ],
      "answer": "0"
    },
    {
      "topic": "8. Pole",
      "question": "Jak se zjistí délka pole v Javě?",
      "options": [
        ".size()",
        ".length",
        ".count()",
        ".getLength()"
      ],
      "answer": ".length"
    },
    {
      "topic": "8. Pole",
      "question": "Který cyklus je nejčastěji používán pro procházení pole bez indexu?",
      "options": [
        "for",
        "while",
        "do-while",
        "foreach"
      ],
      "answer": "foreach"
    },
    {
      "topic": "8. Pole",
      "question": "Co vrací příkaz 'System.out.println(words[1][0])' pro dvourozměrné pole 'String[][] words = {{\"word1\", \"word2\"}, {\"word4\", \"word5\"}}'?",
      "options": [
        "word1",
        "word2",
        "word4",
        "word5"
      ],
      "answer": "word4"
    },
    {
    "topic": "9. OOP",
    "question": "Co je hlavním principem objektově orientovaného programování (OOP)?",
    "options": [
      "Práce s procedurami a funkcemi",
      "Vytváření objektů obsahujících data a metody",
      "Optimalizace výkonu programu",
      "Použití globálních proměnných"
    ],
    "answer": "Vytváření objektů obsahujících data a metody"
  },
  {
    "topic": "9. OOP",
    "question": "Která z následujících vlastností není charakteristická pro OOP?",
    "options": [
      "Zapouzdření",
      "Dědičnost",
      "Polymorfismus",
      "Sekvenční programování"
    ],
    "answer": "Sekvenční programování"
  },
  {
    "topic": "9. OOP",
    "question": "Co označuje klíčové slovo 'static' v Javě?",
    "options": [
      "Metoda nebo proměnná patří instanci třídy",
      "Metoda nebo proměnná patří třídě, nikoli instanci",
      "Proměnná je neměnná",
      "Metoda je abstraktní"
    ],
    "answer": "Metoda nebo proměnná patří třídě, nikoli instanci"
  },
  {
    "topic": "9. OOP",
    "question": "Jaký je účel klíčového slova 'final' u třídy?",
    "options": [
      "Třída může být zděděna",
      "Třída nemůže být zděděna",
      "Třída je abstraktní",
      "Třída je automaticky inicializována"
    ],
    "answer": "Třída nemůže být zděděna"
  },
  {
    "topic": "9. OOP",
    "question": "Co dělá klíčové slovo 'super' v Javě?",
    "options": [
      "Odkazuje na aktuální instanci třídy",
      "Vytváří novou instanci třídy",
      "Odkazuje na rodičovskou třídu",
      "Ukončuje běh programu"
    ],
    "answer": "Odkazuje na rodičovskou třídu"
  },
  {
    "topic": "10. Interface",
    "question": "Co definuje rozhraní (interface) v Javě?",
    "options": [
      "Kompletní implementaci třídy",
      "Abstraktní metody, které třída musí implementovat",
      "Statické proměnné třídy",
      "Privátní metody třídy"
    ],
    "answer": "Abstraktní metody, které třída musí implementovat"
  },
  {
    "topic": "10. Interface",
    "question": "Jaký je hlavní rozdíl mezi rozhraním a abstraktní třídou?",
    "options": [
      "Rozhraní může obsahovat atributy, abstraktní třída ne",
      "Třída může implementovat více rozhraní, ale dědit pouze jednu abstraktní třídu",
      "Rozhraní může mít konkrétní metody, abstraktní třída ne",
      "Abstraktní třída nemůže být instancována, rozhraní ano"
    ],
    "answer": "Třída může implementovat více rozhraní, ale dědit pouze jednu abstraktní třídu"
  },
  {
    "topic": "10. Interface",
    "question": "Co označuje klíčové slovo 'implements'?",
    "options": [
      "Dědičnost mezi třídami",
      "Implementaci rozhraní třídou",
      "Vytvoření nového rozhraní",
      "Přepsání metody rodičovské třídy"
    ],
    "answer": "Implementaci rozhraní třídou"
  },
  {
    "topic": "10. Interface",
    "question": "Co je marker interface?",
    "options": [
      "Rozhraní s jednou metodou",
      "Rozhraní bez metod sloužící k označení třídy",
      "Rozhraní s výchozími metodami",
      "Rozhraní obsahující pouze konstanty"
    ],
    "answer": "Rozhraní bez metod sloužící k označení třídy"
  },
  {
    "topic": "10. Interface",
    "question": "K čemu slouží anotace '@Override'?",
    "options": [
      "Označuje zastaralou metodu",
      "Potlačuje varování kompilátoru",
      "Označuje, že metoda přepisuje rodičovskou metodu",
      "Definuje funkční rozhraní"
    ],
    "answer": "Označuje, že metoda přepisuje rodičovskou metodu"
  },
  {
    "topic": "11. Enum",
    "question": "Co je výč nestsý typ (enum) v Javě?",
    "options": [
      "Třída s dynamickými hodnotami",
      "Omezená množina konstant",
      "Rozhraní s abstraktními metodami",
      "Třída pro práci s čísly"
    ],
    "answer": "Omezená množina konstant"
  },
  {
    "topic": "11. Enum",
    "question": "Mohou výčtové typy v Javě obsahovat metody?",
    "options": [
      "Ne, pouze konstanty",
      "Ano, stejně jako běžné třídy",
      "Pouze abstraktní metody",
      "Pouze statické metody"
    ],
    "answer": "Ano, stejně jako běžné třídy"
  },
  {
    "topic": "11. Enum",
    "question": "Co umožňuje implementace rozhraní výčtovým typem?",
    "options": [
      "Přidání dynamických hodnot",
      "Přidání funkčnosti prostřednictvím metod rozhraní",
      "Změnu hodnot výčtového typu",
      "Vytvoření nového výčtového typu"
    ],
    "answer": "Přidání funkčnosti prostřednictvím metod rozhraní"
  },
  {
    "topic": "11. Enum",
    "question": "Jaký je příklad použití výčtového typu?",
    "options": [
      "Správa databázových připojení",
      "Reprezentace dnů v týdnu",
      "Vytvoření uživatelského rozhraní",
      "Zpracování vstupu od uživatele"
    ],
    "answer": "Reprezentace dnů v týdnu"
  },
  {
    "topic": "11. Enum",
    "question": "Co zajišťuje typová bezpečnost výčtového typu?",
    "options": [
      "Možnost přiřadit libovolnou hodnotu",
      "Omezení na předem definované konstanty",
      "Automatickou konverzi hodnot",
      "Dynamické přidávání hodnot"
    ],
    "answer": "Omezení na předem definované konstanty"
  },
  {
    "topic": "12. Návrhové vzory",
    "question": "Co je hlavním cílem návrhového vzoru MVC?",
    "options": [
      "Zajištění jedné instance třídy",
      "Oddělení logiky aplikace od uživatelského rozhraní",
      "Vytvoření objektů bez použití konstruktoru",
      "Krok za krokem vytváření složitých objektů"
    ],
    "answer": "Oddělení logiky aplikace od uživatelského rozhraní"
  },
  {
    "topic": "12. Návrhové vzory",
    "question": "Který návrhový vzor zajišťuje, že třída má pouze jednu instanci?",
    "options": [
      "Factory",
      "Builder",
      "Singleton",
      "MVC"
    ],
    "answer": "Singleton"
  },
  {
    "topic": "12. Návrhové vzory",
    "question": "Co umožňuje návrhový vzor Factory?",
    "options": [
      "Vytvoření jedné instance třídy",
      "Flexibilní vytváření objektů bez explicitního použití 'new'",
      "Oddělení logiky od uživatelského rozhraní",
      "Vytváření objektů krok za krokem"
    ],
    "answer": "Flexibilní vytváření objektů bez explicitního použití 'new'"
  },
  {
    "topic": "12. Návrhové vzory",
    "question": "K čemu slouží návrhový vzor Builder?",
    "options": [
      "Zajištění jedné instance třídy",
      "Vytváření složitých objektů krok za krokem",
      "Správa databázových připojení",
      "Oddělení logiky od zobrazení"
    ],
    "answer": "Vytváření složitých objektů krok za krokem"
  },
  {
    "topic": "12. Návrhové vzory",
    "question": "Který z následujících je příkladem použití vzoru Singleton?",
    "options": [
      "Vytvoření různých typů vozidel",
      "Správa konfigurace aplikace",
      "Zobrazení dat v uživatelském rozhraní",
      "Vytvoření komplexního objektu s mnoha atributy"
    ],
    "answer": "Správa konfigurace aplikace"
  },
  {
    "topic": "13. Datum a čas",
    "question": "Která třída v Javě slouží k získání aktuálního data bez času?",
    "options": [
      "LocalDateTime",
      "ZonedDateTime",
      "LocalDate",
      "LocalTime"
    ],
    "answer": "LocalDate"
  },
  {
    "topic": "13. Datum a čas",
    "question": "Jaká metoda se používá k formátování data a času v Javě?",
    "options": [
      "DateTimeFormatter.format()",
      "LocalDate.parse()",
      "ZonedDateTime.now()",
      "ChronoUnit.between()"
    ],
    "answer": "DateTimeFormatter.format()"
  },
  {
    "topic": "13. Datum a čas",
    "question": "K čemu slouží metoda ChronoUnit.between()?",
    "options": [
      "Vytvoření nového data",
      "Výpočet rozdílu mezi dvěma datumy",
      "Formátování data do řetězce",
      "Přidání času k datu"
    ],
    "answer": "Výpočet rozdílu mezi dvěma datumy"
  },
  {
    "topic": "13. Datum a čas",
    "question": "Která třída umožňuje práci s časovou zónou?",
    "options": [
      "LocalDate",
      "LocalTime",
      "ZonedDateTime",
      "DateTimeFormatter"
    ],
    "answer": "ZonedDateTime"
  },
  {
    "topic": "13. Datum a čas",
    "question": "Jaký formát by měl výstup metody DateTimeFormatter.ofPattern('yyyy-MM-dd')?",
    "options": [
      "2025/12/31",
      "31-12-2025",
      "2025-12-31",
      "12-31-2025"
    ],
    "answer": "2025-12-31"
  },
  {
    "topic": "14. Práce se soubory",
    "question": "Která metoda třídy File vytvoří nový soubor?",
    "options": [
      "writeString()",
      "createNewFile()",
      "readAllLines()",
      "createDirectories()"
    ],
    "answer": "createNewFile()"
  },
  {
    "topic": "14. Práce se soubory",
    "question": "Co je hlavní výhodou formátu CSV oproti JSON?",
    "options": [
      "Podpora vnořených struktur",
      "Jednoduchý formát a malá velikost",
      "Podpora různých datových typů",
      "Možnost přidávat komentáře"
    ],
    "answer": "Jednoduchý formát a malá velikost"
  },
  {
    "topic": "14. Práce se soubory",
    "question": "Která třída z JavaFX slouží k výběru souboru v grafickém rozhraní?",
    "options": [
      "FileWriter",
      "FileChooser",
      "BufferedReader",
      "Files"
    ],
    "answer": "FileChooser"
  },
  {
    "topic": "14. Práce se soubory",
    "question": "K čemu slouží metoda Files.writeString() v balíčku java.nio?",
    "options": [
      "Čtení souboru po řádcích",
      "Zápis řetězce do souboru",
      "Vytvoření adresáře",
      "Kopírování souboru"
    ],
    "answer": "Zápis řetězce do souboru"
  },
  {
    "topic": "14. Práce se soubory",
    "question": "Která výjimka může být vyvolána při čtení neexistujícího souboru?",
    "options": [
      "IOException",
      "FileNotFoundException",
      "NullPointerException",
      "ArithmeticException"
    ],
    "answer": "FileNotFoundException"
  },
  {
    "topic": "15. Kolekce",
    "question": "Co je hlavní vlastností kolekce typu Set?",
    "options": [
      "Udržuje pořadí prvků",
      "Neumožňuje duplicitní prvky",
      "Pracuje na principu LIFO",
      "Ukládá páry klíč-hodnota"
    ],
    "answer": "Neumožňuje duplicitní prvky"
  },
  {
    "topic": "15. Kolekce",
    "question": "Která kolekce je nejvhodnější pro rychlý přístup k prvkům podle indexu?",
    "options": [
      "LinkedList",
      "HashSet",
      "ArrayList",
      "HashMap"
    ],
    "answer": "ArrayList"
  },
  {
    "topic": "15. Kolekce",
    "question": "Co je výhodou použití generických kolekcí?",
    "options": [
      "Možnost ukládat libovolné typy objektů",
      "Zajištění typové bezpečnosti",
      "Rychlejší zpracování dat",
      "Menší nároky na paměť"
    ],
    "answer": "Zajištění typové bezpečnosti"
  },
  {
    "topic": "15. Kolekce",
    "question": "Která kolekce pracuje na principu LIFO (Last In, First Out)?",
    "options": [
      "Queue",
      "Stack",
      "ArrayList",
      "HashSet"
    ],
    "answer": "Stack"
  },
  {
    "topic": "15. Kolekce",
    "question": "Jaká je hlavní vlastnost HashMap?",
    "options": [
      "Udržuje pořadí prvků",
      "Umožňuje duplicitní klíče",
      "Rychlé vyhledávání podle klíče",
      "Pracuje na principu FIFO"
    ],
    "answer": "Rychlé vyhledávání podle klíče"
  },
  {
    "topic": "16. Výjimky a ladění",
    "question": "K čemu slouží blok try v Javě?",
    "options": [
      "Ukončení programu",
      "Ošetření potenciálních výjimek",
      "Inicializace proměnných",
      "Vytvoření nové výjimky"
    ],
    "answer": "Ošetření potenciálních výjimek"
  },
  {
    "topic": "16. Výjimky a ladění",
    "question": "Který typ výjimky musí být vždy ošetřen nebo deklarován?",
    "options": [
      "Unchecked Exception",
      "Checked Exception",
      "Error",
      "RuntimeException"
    ],
    "answer": "Checked Exception"
  },
  {
    "topic": "16. Výjimky a ladění",
    "question": "Co je nutné pro vytvoření vlastní výjimky?",
    "options": [
      "Dědění od třídy Exception nebo RuntimeException",
      "Implementace rozhraní Throwable",
      "Vytvoření statické metody",
      "Přepsání metody toString()"
    ],
    "answer": "Dědění od třídy Exception nebo RuntimeException"
  },
  {
    "topic": "16. Výjimky a ladění",
    "question": "K čemu slouží debugger v IDE?",
    "options": [
      "Automatické generování kódu",
      "Sledování a ladění programu krok za krokem",
      "Kompilace programu",
      "Správa paměti"
    ],
    "answer": "Sledování a ladění programu krok za krokem"
  },
  {
    "topic": "16. Výjimky a ladění",
    "question": "Který příklad je nekontrolovanou výjimkou?",
    "options": [
      "IOException",
      "SQLException",
      "NullPointerException",
      "FileNotFoundException"
    ],
    "answer": "NullPointerException"
  }
]